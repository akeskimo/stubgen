#!/usr/bin/env python3

import unittest
import testlib
import subprocess
import stub_gen
import tempfile


class MockIOStream:
    def __init__(self):
        self._data = ""

    def write(self, data):
        self._data += data

    def close(self):
        pass

    def getvalue(self):
        return self._data


class TestStubGen(unittest.TestCase):
    def test_write_class(self):
        data = {
            "field1": 1,
            "field2": "2",
            "field3": "value"
        }
        exp_value = """
class TestClass:
    def __init__(self):
        self.field1: int
        self.field2: str
        self.field3: str

"""
        out = MockIOStream()
        stub_gen.write_class(out, data, "TestClass")
        self.assertEqual(exp_value, out.getvalue())

    def test_stub_gen_cli(self):
        data = b"""{
            "foo": "bar",
            "baz": 1
        }"""
        exp_value = """#/usr/bin/env python3
# Generated by Stub Gen (version: 0)

class Object:
    def __init__(self):
        self.foo: str
        self.baz: int

"""

        script_path = testlib.rootpath("../stub_gen.py")
        process = subprocess.run([script_path, "--stdin"], input=data, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        self.assertEqual(0, process.returncode, "Process non-zero exit status %d\n\nSTDERR:\n%s" % (process.returncode, process.stderr.decode("utf-8")))
        self.assertEqual(exp_value, process.stdout.decode("utf-8"))

        with tempfile.NamedTemporaryFile("w") as tmp:
            process = subprocess.run([script_path, "--stdin", "--output-file", tmp.name], input=data, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            with open(tmp.name, "r") as fh:
                self.assertEqual(exp_value, fh.read())




if __name__ == "__main__":
    unittest.main()