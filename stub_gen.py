#!/usr/bin/env python3

""" Stub generator for lint checking for python. """

import json

version = 0


def write_stub(fh, data, class_name):
    fh.write("# Generated by Stub Gen (version: %d)\n" % version)
    _write_class(fh, data, class_name)


def _write_class(fh, data, class_name, indent=0):
    lines = []
    lines.append("\n")
    lines.append(indent * " " + "class " + class_name + ":\n")

    def write_property(fh, key, value, indent, properties):
        class_name = value.__class__.__name__
        property_type = value.__class__.__name__
        if type(value) == dict:
            class_name = key[0].upper() + key[1:]
            property_type = class_name
            write_class(fh, value, class_name, indent=0)
        lines.append(indent * " " + "self." + key + ": " + property_type + " = " + key + "\n")
        properties.append(key + ": " + property_type + "=None")
        return properties

    indent += 4
    constr_id = "<<" + class_name + ">>"
    lines.append(indent * " " + "def __init__(self, " + constr_id + "):\n")
    properties = []
    for key, value in data.items():
        properties = write_property(fh, key, value, indent + 4, properties)
    lines.append("\n")

    for idx, value in enumerate(lines):
        fh.write(value.replace(constr_id, ", ".join(properties)))


if __name__ == "__main__":
    import argparse, sys
    parser = argparse.ArgumentParser(prog="Python stub generator.")
    parser.add_argument("--input-file",
        help="Input filepath.")
    parser.add_argument("-o", "--output-file",
        help="Output filepath.")
    parser.add_argument("--input-format", choices=["json"], default="json",
        help="Input data format (default=json).")
    parser.add_argument("--stub-class", default="Object",
        help="Class name for the python interface (default=Object).")
    parser.add_argument("--stdin", action="store_true",
        help="Read input data from standard input.")
    args = parser.parse_args(sys.argv[1:])

    if args.stdin and args.input_file:
        assert False, "You can only specify one input data source"

    if args.stdin:
        data = sys.stdin.read()
    elif args.input_file:
        with open(args.input_file, "r") as fh:
            data = fh.read()
    else:
        print("No input source specified.")
        sys.exit(1)

    if args.input_format == "json":
        dict_data = json.loads(data)
    else:
        print("Unsupported input format: %s" % args.input_format)
        sys.exit(1)

    try:
        if args.output_file:
            fh = open(args.output_file, "w")
        else:
            fh = sys.stdout

        write_stub(fh, dict_data, args.stub_class)
    finally:
        fh.close()
